
DA2T1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000092  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a9  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRC = 1 << 0;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~ (1<<0);
  84:	40 98       	cbi	0x08, 0	; 8
    while (1) 
    {
		OCR1A = 0x3D09;
  86:	c8 e8       	ldi	r28, 0x88	; 136
  88:	d0 e0       	ldi	r29, 0x00	; 0
  8a:	49 e0       	ldi	r20, 0x09	; 9
  8c:	5d e3       	ldi	r21, 0x3D	; 61
		TCCR1A = 0x00;
  8e:	a0 e8       	ldi	r26, 0x80	; 128
  90:	b0 e0       	ldi	r27, 0x00	; 0
		TCCR1B = 0x0C;
  92:	e1 e8       	ldi	r30, 0x81	; 129
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	2c e0       	ldi	r18, 0x0C	; 12
		while ((TIFR1&(1<<OCF1A)) == 0)
		{
			TIFR1 |= 1<<OCF1A;
			PORTC =  PORTC ^ (1<<0);
  98:	91 e0       	ldi	r25, 0x01	; 1
{
    DDRC = 1 << 0;
	PORTC &= ~ (1<<0);
    while (1) 
    {
		OCR1A = 0x3D09;
  9a:	59 83       	std	Y+1, r21	; 0x01
  9c:	48 83       	st	Y, r20
		TCCR1A = 0x00;
  9e:	1c 92       	st	X, r1
		TCCR1B = 0x0C;
  a0:	20 83       	st	Z, r18
		while ((TIFR1&(1<<OCF1A)) == 0)
  a2:	b1 99       	sbic	0x16, 1	; 22
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x1a>
		{
			TIFR1 |= 1<<OCF1A;
  a6:	b1 9a       	sbi	0x16, 1	; 22
			PORTC =  PORTC ^ (1<<0);
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	89 27       	eor	r24, r25
  ac:	88 b9       	out	0x08, r24	; 8
    while (1) 
    {
		OCR1A = 0x3D09;
		TCCR1A = 0x00;
		TCCR1B = 0x0C;
		while ((TIFR1&(1<<OCF1A)) == 0)
  ae:	b1 9b       	sbis	0x16, 1	; 22
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <main+0x26>
  b2:	f3 cf       	rjmp	.-26     	; 0x9a <main+0x1a>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
