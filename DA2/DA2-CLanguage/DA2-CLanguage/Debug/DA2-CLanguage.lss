
DA2-CLanguage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000102  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000071  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000cc  00000000  00000000  00000367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000106  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRC |= (1 << PC0) | (1 << PC4) | (1 << PC5);	//PC0, PC4, PC5 as output
  80:	87 b1       	in	r24, 0x07	; 7
  82:	81 63       	ori	r24, 0x31	; 49
  84:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~ (1<<0);								//Set PC0 high
  86:	40 98       	cbi	0x08, 0	; 8

	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7); //PD0-PD7 as output
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;	//Set on low
  8e:	1b b8       	out	0x0b, r1	; 11
	uint8_t Reg16 = 0x01;
	uint8_t Reg17 = 0x01;
	uint8_t Reg18 = 0x00;

	uint8_t CountPC4 = 0;	//Counter compare to 5
	uint8_t CountPC5 = 0;	//Counter compare to 10
  90:	60 e0       	ldi	r22, 0x00	; 0

	uint8_t Reg16 = 0x01;
	uint8_t Reg17 = 0x01;
	uint8_t Reg18 = 0x00;

	uint8_t CountPC4 = 0;	//Counter compare to 5
  92:	20 e0       	ldi	r18, 0x00	; 0

	uint8_t Reg19 = 0x00;	//Counter for 8-bit

	uint8_t Reg16 = 0x01;
	uint8_t Reg17 = 0x01;
	uint8_t Reg18 = 0x00;
  94:	80 e0       	ldi	r24, 0x00	; 0
	PORTD = 0;	//Set on low

	uint8_t Reg19 = 0x00;	//Counter for 8-bit

	uint8_t Reg16 = 0x01;
	uint8_t Reg17 = 0x01;
  96:	51 e0       	ldi	r21, 0x01	; 1
    PORTC &= ~ (1<<0);								//Set PC0 high

	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7); //PD0-PD7 as output
	PORTD = 0;	//Set on low

	uint8_t Reg19 = 0x00;	//Counter for 8-bit
  98:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t Reg23 = 0x10;	//For PC4
	uint8_t Reg24 = 0x20;	//For PC5

    while (1)
    {
	    TCNT1 = 0x85ED;		//Timer1 = 0x85ED
  9a:	04 e8       	ldi	r16, 0x84	; 132
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	cd ee       	ldi	r28, 0xED	; 237
  a0:	d5 e8       	ldi	r29, 0x85	; 133
	    TCCR1A = 0x00;		//WGM11:10 = 00
  a2:	68 94       	set
  a4:	cc 24       	eor	r12, r12
  a6:	c7 f8       	bld	r12, 7
  a8:	d1 2c       	mov	r13, r1
	    TCCR1B = 0x03;		//WGM13:12 = 00, Normal Mode, Prescaler = 3
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	73 e0       	ldi	r23, 0x03	; 3
		
	    while ((TIFR1&(1<<TOV1)) == 0);		//Read TIFR, if TOV1 is set skip next instruction
	    TCCR1B = 0x01;						//Stop Timer1
  b0:	31 e0       	ldi	r19, 0x01	; 1
		CountPC4++;		//Increment counter for PC4
		CountPC5++;		//Increment counter for PC5

		if (CountPC4 == 10)			//Compare to 5 rising pulse
		{
			Reg17 ^= Reg23;			//Toggle R17 using EOR
  b2:	0f 2e       	mov	r0, r31
  b4:	f1 e1       	ldi	r31, 0x11	; 17
  b6:	ff 2e       	mov	r15, r31
  b8:	f0 2d       	mov	r31, r0
			PORTC = Reg17;			//Toggle PC4
			CountPC4 = 0;			//Reset counter for PC4
			if (CountPC5 == 20)		//Compare to 10 rising pulse
			{
				Reg17 ^= Reg24;		//Toggle R17 using EOR
  ba:	0f 2e       	mov	r0, r31
  bc:	f1 e3       	ldi	r31, 0x31	; 49
  be:	ef 2e       	mov	r14, r31
  c0:	f0 2d       	mov	r31, r0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x48>

		if (CountPC4 == 10)			//Compare to 5 rising pulse
		{
			Reg17 ^= Reg23;			//Toggle R17 using EOR
			PORTC = Reg17;			//Toggle PC4
			CountPC4 = 0;			//Reset counter for PC4
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	59 2f       	mov	r21, r25
	uint8_t Reg23 = 0x10;	//For PC4
	uint8_t Reg24 = 0x20;	//For PC5

    while (1)
    {
	    TCNT1 = 0x85ED;		//Timer1 = 0x85ED
  c8:	d8 01       	movw	r26, r16
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	dc 93       	st	X, r29
  ce:	ce 93       	st	-X, r28
	    TCCR1A = 0x00;		//WGM11:10 = 00
  d0:	d6 01       	movw	r26, r12
  d2:	1c 92       	st	X, r1
	    TCCR1B = 0x03;		//WGM13:12 = 00, Normal Mode, Prescaler = 3
  d4:	70 83       	st	Z, r23
		
	    while ((TIFR1&(1<<TOV1)) == 0);		//Read TIFR, if TOV1 is set skip next instruction
  d6:	b0 9b       	sbis	0x16, 0	; 22
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x56>
	    TCCR1B = 0x01;						//Stop Timer1
  da:	30 83       	st	Z, r19
	    TIFR1 |= (1<<TOV1);					//Clear TOV1 Flag
  dc:	b0 9a       	sbi	0x16, 0	; 22

		Reg17 ^= Reg16;			//Toggle R17 using EOR
  de:	95 2f       	mov	r25, r21
  e0:	93 27       	eor	r25, r19
	    PORTC = Reg17;			//Toggle PC0
  e2:	98 b9       	out	0x08, r25	; 8

		Reg18 ^= Reg16;			//Toggle R18 using EOR
  e4:	83 27       	eor	r24, r19
		PORTD = Reg18;			//Toggle PD0
  e6:	8b b9       	out	0x0b, r24	; 11
		Reg19 = Reg19 + Reg18;	//Increment counter
  e8:	48 0f       	add	r20, r24
		PORTD = Reg19;			//Toggle rest of PD
  ea:	4b b9       	out	0x0b, r20	; 11

		CountPC4++;		//Increment counter for PC4
  ec:	2f 5f       	subi	r18, 0xFF	; 255
		CountPC5++;		//Increment counter for PC5
  ee:	6f 5f       	subi	r22, 0xFF	; 255

		if (CountPC4 == 10)			//Compare to 5 rising pulse
  f0:	2a 30       	cpi	r18, 0x0A	; 10
  f2:	49 f7       	brne	.-46     	; 0xc6 <main+0x46>
		{
			Reg17 ^= Reg23;			//Toggle R17 using EOR
  f4:	95 2f       	mov	r25, r21
  f6:	9f 25       	eor	r25, r15
			PORTC = Reg17;			//Toggle PC4
  f8:	98 b9       	out	0x08, r25	; 8
			CountPC4 = 0;			//Reset counter for PC4
			if (CountPC5 == 20)		//Compare to 10 rising pulse
  fa:	64 31       	cpi	r22, 0x14	; 20
  fc:	19 f7       	brne	.-58     	; 0xc4 <main+0x44>
			{
				Reg17 ^= Reg24;		//Toggle R17 using EOR
  fe:	95 2f       	mov	r25, r21
 100:	9e 25       	eor	r25, r14
				PORTC = Reg17;		//Toggle PC5
 102:	98 b9       	out	0x08, r25	; 8
				CountPC5 = 0;		//Reset counter for PC5
 104:	60 e0       	ldi	r22, 0x00	; 0

		if (CountPC4 == 10)			//Compare to 5 rising pulse
		{
			Reg17 ^= Reg23;			//Toggle R17 using EOR
			PORTC = Reg17;			//Toggle PC4
			CountPC4 = 0;			//Reset counter for PC4
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	de cf       	rjmp	.-68     	; 0xc6 <main+0x46>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
