
DesignAssignment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000229  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f7  00000000  00000000  00000449  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000152  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ba  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ca  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}

int main(void) {
	int16_t potentiometerValue;
		
	DDRC |= (1 << ENABLE); //Data Direction Register B: writing a 1 to the bit enables output
  80:	39 9a       	sbi	0x07, 1	; 7
#include <util/delay.h>

#define ENABLE 1

static inline void initADC0(void) {
	ADMUX |= (1 << REFS0); //reference voltage on AVCC
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC clock prescaler /8
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	87 60       	ori	r24, 0x07	; 7
  94:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enables the ADC
  96:	80 81       	ld	r24, Z
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
	initADC0();

	while (1) {
		ADCSRA |= (1 << ADSC); //start ADC conversion
		loop_until_bit_is_clear(ADCSRA, ADSC); //wait until ADC conversion is done
		potentiometerValue= ADC; //read ADC value in
  9c:	a8 e7       	ldi	r26, 0x78	; 120
  9e:	b0 e0       	ldi	r27, 0x00	; 0
	DDRC |= (1 << ENABLE); //Data Direction Register B: writing a 1 to the bit enables output

	initADC0();

	while (1) {
		ADCSRA |= (1 << ADSC); //start ADC conversion
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
		loop_until_bit_is_clear(ADCSRA, ADSC); //wait until ADC conversion is done
  a6:	80 81       	ld	r24, Z
  a8:	86 fd       	sbrc	r24, 6
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <main+0x26>
		potentiometerValue= ADC; //read ADC value in
  ac:	8d 91       	ld	r24, X+
  ae:	9c 91       	ld	r25, X
  b0:	11 97       	sbiw	r26, 0x01	; 1
		
		if (potentiometerValue >= 0  && potentiometerValue < 250) {
  b2:	8a 3f       	cpi	r24, 0xFA	; 250
  b4:	91 05       	cpc	r25, r1
  b6:	60 f4       	brcc	.+24     	; 0xd0 <main+0x50>
			PORTC = PORTC | (1<<ENABLE);
  b8:	41 9a       	sbi	0x08, 1	; 8
			_delay_ms(0); //100% duty cycle pulse
			PORTC = PORTC & (~(1<<ENABLE));
  ba:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	80 e7       	ldi	r24, 0x70	; 112
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
  ce:	e8 cf       	rjmp	.-48     	; 0xa0 <main+0x20>
			_delay_ms(100);
		}
		else if (potentiometerValue >= 250 && potentiometerValue < 500) {
  d0:	9c 01       	movw	r18, r24
  d2:	2a 5f       	subi	r18, 0xFA	; 250
  d4:	31 09       	sbc	r19, r1
  d6:	2a 3f       	cpi	r18, 0xFA	; 250
  d8:	31 05       	cpc	r19, r1
  da:	90 f4       	brcc	.+36     	; 0x100 <main+0x80>
			PORTC = PORTC | (1<<ENABLE);
  dc:	41 9a       	sbi	0x08, 1	; 8
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	93 ec       	ldi	r25, 0xC3	; 195
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x62>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x68>
  e8:	00 00       	nop
			_delay_ms(25); //75% duty cycle pulse
			PORTC = PORTC & (~(1<<ENABLE));
  ea:	41 98       	cbi	0x08, 1	; 8
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	20 e7       	ldi	r18, 0x70	; 112
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop
  fe:	d0 cf       	rjmp	.-96     	; 0xa0 <main+0x20>
			_delay_ms(100);
		}
		else if (potentiometerValue >= 500 && potentiometerValue < 750) {
 100:	84 5f       	subi	r24, 0xF4	; 244
 102:	91 40       	sbci	r25, 0x01	; 1
 104:	8a 3f       	cpi	r24, 0xFA	; 250
 106:	91 05       	cpc	r25, r1
 108:	a8 f4       	brcc	.+42     	; 0x134 <main+0xb4>
			PORTC = PORTC | (1<<ENABLE);
 10a:	41 9a       	sbi	0x08, 1	; 8
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	20 e7       	ldi	r18, 0x70	; 112
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	91 50       	subi	r25, 0x01	; 1
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x92>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9c>
 11c:	00 00       	nop
			_delay_ms(100); //50% duty cycle pulse
			PORTC = PORTC & (~(1<<ENABLE));
 11e:	41 98       	cbi	0x08, 1	; 8
 120:	9f ef       	ldi	r25, 0xFF	; 255
 122:	20 e7       	ldi	r18, 0x70	; 112
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	91 50       	subi	r25, 0x01	; 1
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xa6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xb0>
 130:	00 00       	nop
 132:	b6 cf       	rjmp	.-148    	; 0xa0 <main+0x20>
			_delay_ms(100);
		}
		else {
			PORTC = PORTC | (1<<ENABLE);
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	b4 cf       	rjmp	.-152    	; 0xa0 <main+0x20>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
